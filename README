See file COPYING distributed with the xnnppx package for the copyright and license.

xnnppx is a package for launching Python scripts from XNAT (www.xnat.org).

CONTENTS

    README -- This file.

    COPYING -- Copyright and license.

    XnatPipelineLauncher -- The drop-in replacement script for XnatPipelineLauncher that shunts execution to a Python script, if available.

    XnatNipypeLauncher -- The Python script launcher.

    xnnppx.py -- The XNAT utility module for the Python script.

    create_workflow_xml -- A utility program for converting a Python or YAML dictionary into an XML XNAT pipeline descriptor.

    sample.info -- Example Python dictionary for generating an XML pipeline descriptor.

    sample.py -- Example Python script.

INSTALLATION

Install Suds: https://fedorahosted.org/suds/

In $PIPELINE_HOME in your XNAT installation (typically $XNAT_HOME/pipeline), move bin/XnatPipelineLauncher to bin/XnatPipelineLauncher.orig and install XnatPipelineLauncher in bin.  Change pipeline_home in this (new) XnatPipelineLauncher and make sure this file has executable permissions.

    This step steals execution from XNAT and shunts it to Python scripts if they are available.  Otherwise it passes control back to XNAT's native pipeline launcher.

Install XnatNipypeLauncher in $PIPELINE_HOME/bin with executable permissions.

    If XnatPipelineLauncher finds a Python script that needs to be run, it calls this script, which takes the parameters passed by XNAT and packages them in a form easily used by the Python script.

Install xnnppx.py in your Python path.

    This is the module that the Python script will use to access the XNAT parameters and update the workflow information.

CREATING A PYTHON PIPELINE

Simply create a Python script with extension .py in the same directory as the XML pipeline descriptor (typically in $PIPELINE_HOME/catalog/...).  XnatPipelineLauncher detects this script and launches it with XnatNipypeLauncher rather than the native XNAT pipeline launcher.

See sample.* for an example.  Install sample.py in a subdirectory of $PIPELINE_HOME/catalog, for instance $PIPELINE_HOME/catalog/local/sample.py.  XNAT will need an XML descriptor of the pipeline in order to launch it; this can be created by describing the pipeline as a Python or YAML dictionary (see sample.info) and converting it with create_workflow_xml.  Put the result in $PIPELINE_HOME/catalog/local/sample.xml.

The script can access the pipeline arguments and parameters in the dictionaries xnnppx.parameters and xnnppx.arguments.  Because any parameters may have more than one value, the values in xnnppx.parameters are all lists of parameter values.

xnnppx.send_mail(to_addrs, subject, body) can be used to send mail.

XnatNipypeLauncher will redirect output to a log file (typically in $PIPELINE_HOME/logs), update XNAT (more specifically, the workflow XML) with the workflow execution environment and pass control to the Python script.  Once the script has started, it is then responsible for updating the workflow XML, which can be done by calling:

    xnnppx.workflow_info.update(step_id, step_description, percent_complete)

    xnnppx.workflow_info.complete()

    xnnppx.workflow_info.fail([step_description])

xnnppx.ContextManager may be used to automatically mark the workflow XML complete using xnnppx.workflow_info.complete() or xnnppx.workflow_info.fail() as appropriate and send a success or failure e-mail as specified by the notify_flag (-supressNotification) and notify_emails (-notify) arguments.

LAUNCHING A PIPELINE

setting up xnat

REST call

XNAT_NIPYPE_NOLOG
